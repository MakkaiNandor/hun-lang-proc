@page "/wordproc"
@implements IDisposable

<h1>Szóelemzés</h1>

<p><i>Morfológiai elemző modul</i></p>

<a href="wordproc/#" @onclick="ToggleCollapse">
    <span class="oi @Icon"></span> részletek
</a>

@if (Collapse)
{
    <p class="p-3">A <b>morfológiai elemző</b> modul egy vagy több szót vár bemenetként, minden szóra elvégzi az elemzést és visszatéríti a lehetséges megoldásokat. A megoldások tartalmazzák a szótövet, ennek szófaját, valamint az ehhez kapcsolódó toldalékokat.</p>
}

<hr />

<div class="row">
    <label class="col-1 col-form-label font-weight-bold">Bemenet:</label>
    <div class="col-5">
        <input type="text" class="form-control" @bind="Input" placeholder="egy vagy több szó" />
    </div>
    <div class="col-1">
        <button class="btn btn-primary" @onclick="async (e) => await this.OnAnalyzeClicked()" disabled="@(AnalyzeStarted || DataLoading)">Elemzés</button>
    </div>
    <div class="col-1">
        <button class="btn btn-primary" @onclick="OnResetClicked" disabled="@DataLoading">Visszaállít</button>
    </div>
</div>

<div class="text-info font-weight-bold mt-3 pl-3">@InfoMessage</div>

<hr />

<div>
    <p class="mt-2 font-weight-bold">Elemzés eredménye:</p>
</div>

@foreach (var result in Result)
{
    <hr />
    <div class="row">
        <div class="col-2">
            @result.OriginalWord
        </div>
        <div class="col">
            @foreach (var variant in result.Variants)
            {
                <p>@variant</p>
            }
        </div>
    </div>
}

@code {
    bool Collapse = false;
    bool AnalyzeStarted = false;
    bool DataLoading = false;
    string InfoMessage = "";
    string Icon = "oi-chevron-right";
    string Input = "";
    List<MAResult> Result = new List<MAResult>();
    MorphologicalAnalyzer Analyzer;

    protected override async Task OnInitializedAsync()
    {
        InfoMessage = "Szükséges adatok betöltése ...";
        DataLoading = true;
        await DatabaseInitializer.InitializeAsync();
        DataLoading = false;
        Analyzer = new MorphologicalAnalyzer();
        InfoMessage = "Készen áll az elemzésre!";
    }

    public void Dispose()
    {
        DatabaseContext.Dispose();
        Console.WriteLine("Database disposed!");
    }

    void ToggleCollapse()
    {
        Collapse = !Collapse;
        Icon = Collapse ? "oi-chevron-bottom" : "oi-chevron-right";
    }

    async Task OnAnalyzeClicked()
    {
        Result.Clear();
        if (Input.Length > 0)
        {
            InfoMessage = "Az elemzés folyamatban van!";
            await Task.Run(() =>
            {
                AnalyzeStarted = true;
                Result = Analyzer.AnalyzeText(Input);
                AnalyzeStarted = false;
            });
            InfoMessage = "";
        }
        else
        {
            InfoMessage = "Nincs bemenet!";
        }
    }

    void OnResetClicked()
    {
        Input = "";
        Result.Clear();
        AnalyzeStarted = false;
        InfoMessage = "";
    }
}
