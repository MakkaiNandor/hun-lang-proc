@page "/wordproc"

<h1>Szóelemzés</h1>

<p><i>Morfológiai elemző modul</i></p>

<a href="wordproc/#" @onclick="ToggleCollapse">
    <span class="oi @Icon"></span> részletek
</a>

@if (Collapse)
{
    <p class="p-3">A <b>morfológiai elemző</b> modul egy vagy több szót vár bemenetként, minden szóra elvégzi az elemzést és visszatéríti a lehetséges megoldásokat. A megoldások tartalmazzák a szótövet, ennek szófaját, valamint az ehhez kapcsolódó toldalékokat.</p>
}

<hr />

<div class="row">
    <label class="col-1 col-form-label">Bemenet:</label>
    <div class="col-5">
        <input type="text" class="form-control" @bind="Input" placeholder="egy vagy több szó" />
    </div>
    <div class="col-1">
        <button class="btn btn-primary" @onclick="async (e) => await this.OnAnalyzeClicked()" disabled="@AnalyzeStarted">Elemzés</button>
    </div>
    <div class="col-1">
        <button class="btn btn-primary" @onclick="OnResetClicked">Visszaállít</button>
    </div>
</div>

@if (AnalyzeStarted && !Result.Any())
{
    <div class="text-info font-weight-bold mt-3 pl-3">Az elemzés folyamatban van!</div>
}
else if (InfoMessage.Length > 0)
{
    <div class="text-info font-weight-bold mt-3 pl-3">@InfoMessage</div>
}

@foreach (var result in Result)
{
    <hr />
    <div class="row">
        <div class="col-2">
            @result.OriginalWord
        </div>
        <div class="col">
            @foreach (var variant in result.Variants)
            {
                <p>@variant</p>
            }
        </div>
    </div>
}

@code {
    bool Collapse = false;
    string Icon = "oi-chevron-right";
    string Input = "";
    List<MAResult> Result = new List<MAResult>();
    MorphologicalAnalyzer Analyzer;
    string InfoMessage = "";
    bool AnalyzeStarted = false;

    protected override async Task OnInitializedAsync()
    {
        Analyzer = new MorphologicalAnalyzer();

        //DatabaseContext db;

        await Task.CompletedTask;
    }

    void ToggleCollapse()
    {
        Collapse = !Collapse;
        Icon = Collapse ? "oi-chevron-bottom" : "oi-chevron-right";
    }

    async Task OnAnalyzeClicked()
    {
        Result.Clear();
        if (Input.Length > 0)
        {

            /*await Task.Run(() => {
                AnalyzeStarted = true;
                Result = Analyzer.AnalyzeText(Input);
                AnalyzeStarted = false;
            });*/
        }
        else
        {
            InfoMessage = "A bemeneti érték nem lehet üres!";
        }
    }

    void OnResetClicked()
    {
        Input = "";
        Result.Clear();
        AnalyzeStarted = false;
        InfoMessage = "";
    }
}
