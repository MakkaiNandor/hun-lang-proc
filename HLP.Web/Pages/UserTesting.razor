@page "/testyourself"

<h1>Mérd fel a tudásod!</h1>

<p>Válaszd ki, hogy miben szeretnéd tesztelni magad. A <b>szóelemző teszt</b> során 10 szót kell felbontanod alkotóelemeire. A <b>mondatelemző teszt</b> során 10 mondatban kell felismerned a mondatrészeket. A megoldásaid helyességét a teszt végén egy pontszám jelzi.</p>

<div class="row">
    <div class="col text-right">
        <button class="btn btn-primary" @onclick="async (e) => await TestSelected(TestType.WordTest)">Szóelemző teszt</button>
    </div>
    <div class="col text-left">
        <button class="btn btn-primary" @onclick="async (e) => await TestSelected(TestType.SentenceTest)">Mondatelemző teszt</button>
    </div>
</div>

@if (SelectedTestType != TestType.Nothing)
{
    <hr/>
    <div>
        @if (DataIsLoading)
        {
            <p class="text-center text-info font-weight-bold">Tesztadatok betöltése!</p>
        }
        else
        {
            <div class="text-center h4 font-weight-bold"><span class="text-success">@CorrectTest</span> / @CurrentTest</div>
            @if (TestInProgress)
            {
                <MorphTestView Test="TestData[CurrentTest]" OnSubmit="OnSubmit" />
            }
        }
    </div>
}

@code {
    enum TestType { Nothing = 0, WordTest = 1, SentenceTest = 2}

    private TestType SelectedTestType = TestType.Nothing;
    private bool DataIsLoading = false;
    private List<MorphTest> TestData = new List<MorphTest>();
    private bool TestInProgress = false;

    private int CorrectTest = 0;
    private int WrongTest = 0;
    private int NumberOfTests = 10;
    private int CurrentTest = 0;

    private async Task TestSelected(TestType type)
    {
        SelectedTestType = type;
        DataIsLoading = true;
        CorrectTest = 0;
        WrongTest = 0;
        CurrentTest = 0;
        await DatabaseInitializer.InitializeAsync();
        if (type == TestType.WordTest)
        {
            TestData = await LoadRandomTestData(NumberOfTests);
            TestInProgress = true;
        }
        else
        {

        }
        DatabaseContext.Dispose();
        DataIsLoading = false;
    }

    private Task<List<MorphTest>> LoadRandomTestData(int numberOfTests)
    {
        var db = DatabaseContext.GetInstance();
        var indices = Enumerable.Range(0, db.MorphTests.Count).ToList();
        var result = new List<MorphTest>();
        var rng = new Random();
        while (result.Count < numberOfTests)
        {
            var index = rng.Next(0, indices.Count());
            result.Add(db.MorphTests[indices[index]]);
            indices.RemoveAt(index);
        }
        return Task.FromResult(result);
    }

    private void OnSubmit(bool result)
    {
        if (result)
            ++CorrectTest;
        else
            ++WrongTest;
        if (++CurrentTest == NumberOfTests)
            TestInProgress = false;
    }
}
