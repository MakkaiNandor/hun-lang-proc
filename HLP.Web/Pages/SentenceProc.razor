@page "/sentenceproc"
@implements IDisposable

<h1>Mondatelemzés</h1>

<p><i>Szintaktikai elemző modul</i></p>

<p class="my-2">A <b>szintaktikai elemző</b> modul még nincs kész.</p>

<hr />

<div class="row">
    <label class="col-1 col-form-label font-weight-bold">Bemenet:</label>
    <div class="col-5">
        <input type="text" class="form-control" @bind="Input" @bind:event="oninput" @onkeydown="CheckIfEnterPressed" placeholder="Egy vagy több mondat" />
    </div>
    <div class="col-1">
        <button class="btn btn-primary" @onclick="async (e) => await OnAnalyzeClicked()" disabled="@(AnalyzeInProgress || DataIsLoading)">Elemzés</button>
    </div>
    <div class="col-1">
        <button class="btn btn-primary" @onclick="OnResetClicked" disabled="@DataIsLoading">Visszaállít</button>
    </div>
</div>

<div class="text-info font-weight-bold mt-3 pl-3">@InfoMessage</div>

<hr />

<div>
    <p class="mt-2 font-weight-bold">Elemzés eredménye:</p>
</div>

@if (Result != null)
{
    @foreach (var result in Result.WordResults)
    {
        <hr />
        <div class="row">
            <div class="col-2">
                @result.OriginalWord
            </div>
            <div class="col">
                @foreach (var variant in result.Variants)
                {
                    <MorphVariant Variant="@variant" />
                }
            </div>
        </div>
    }
}

@code {
    private bool AnalyzeInProgress = false;
    private bool DataIsLoading = false;

    private string Input = "";
    private string State = "";
    private string InfoMessage = "";

    private SAResult Result = null;
    private SyntacticAnalyzer Analyzer;

    protected override async Task OnInitializedAsync()
    {
        InfoMessage = "Szükséges adatok betöltése ...";
        DataIsLoading = true;
        if (DatabaseContext.GetInstance() != null)
            await Task.Delay(500);
        await DatabaseInitializer.InitializeAsync();
        DataIsLoading = false;
        Analyzer = new SyntacticAnalyzer();
        State = "Készen áll az elemzésre!";
        InfoMessage = State;
    }

    public void Dispose()
    {
        DatabaseContext.Dispose();
        Console.WriteLine("(sentenceproc) Database disposed!");
    }

    private async Task CheckIfEnterPressed(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await OnAnalyzeClicked();
        }
    }

    private async Task OnAnalyzeClicked()
    {
        if (Input.Length == 0)
        {
            InfoMessage = "Nincs bemenet!";
            return;
        }

        InfoMessage = "Az elemzés folyamatban van!";
        await Task.Run(() =>
        {
            AnalyzeInProgress = true;
            Result = Analyzer.AnalyzeSentence(Input);
            AnalyzeInProgress = false;
        });
        InfoMessage = State;
    }

    private void OnResetClicked()
    {
        Input = "";
        Result = null;
        AnalyzeInProgress = false;
        InfoMessage = State;
    }
}
